library(ggplot2)
library(readxl)
library(tidyverse)
library(dplyr)
library(lubridate)
library(zoo)
library(forecast)
library(writexl)
library(Metrics)
# Install and load the imputTS package
#install.packages("imputeTS")
library(imputeTS)
version
library(readxl)
library(tidyverse)
library(dplyr)
library(lubridate)
library(zoo)
library(forecast)
library(writexl)
library(Metrics)
# Install and load the imputTS package
#install.packages("imputeTS")
library(imputeTS)
setwd("C:/Users/KerimMasovic/OneDrive - IN516HT D.O.O/Desktop/REPOS/Master thesis/MasterThesis")
setwd("C:/Users/User/teza")
library(ggplot2)
library(readxl)
library(tidyverse)
library(dplyr)
library(lubridate)
library(zoo)
library(forecast)
library(writexl)
library(Metrics)
# Install and load the imputTS package
#install.packages("imputeTS")
library(imputeTS)
#read data
#sales_data <- read_xlsx("fake_sales_data.xlsx")
sales_data <- read_xlsx("fake_data_m5.xlsx")
# Replace zeros with NA
sales_data$Sales[sales_data$Sales == 0] <- NA
#test
#sales_data$Sales <- na_interpolation(sales_data$Sales)
#put it as a variable and time series variable
Sales <- sales_data$Sales
Sales_ts <- ts(Sales, frequency = 365)
summary(Sales_ts)
summary(Sales)
#1 Missing Value Imputation by Weighted Moving Average
train_data <- subset(sales_data, Date < as.Date("2023-01-01"))
test_data <- subset(sales_data, Date >= as.Date("2023-01-01"))
min_k = 4
max_k = 50
results <- list()
best_metric <- Inf
best_k <- NA
#Loop through different k values
for (k in seq(from = min_k, to = max_k, by = 1)) {
#Impute missing values
imputed_data <- na_ma(train_data$Sales, k=100, weighting = "exponential")
#Forecast using imputed data
hw_model <- HoltWinters(ts(imputed_data, frequency = 365), alpha = 1, beta = 1, gamma = 1)
hw_forecast <- forecast(hw_model, h = nrow(test_data))
#Compare the forecasted values with the actual test data
metric <- mae(test_data$Sales, hw_forecast$mean)
#Check if this metric is the best (smallest) one so far
if (metric < best_metric) {
best_metric <- metric
best_k <- k
}
}
print(paste("The best k value is:", best_k))
print(paste("With an MAE of:", best_metric))
